0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1034 (Dec 12 2012) (MSVC)
0000              4   ; This file was generated Mon Mar 25 15:32:39 2013
0000              5   ;--------------------------------------------------------
                  5   $name square_lp828
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_ISEG    segment idata
0000             13            R_OSEG    segment data overlay
0000             14            BIT_BANK  segment data overlay
0000             15            R_HOME    segment code
0000             16            R_GSINIT  segment code
0000             17            R_IXSEG   segment xdata
0000             18            R_CONST   segment code
0000             19            R_XINIT   segment code
0000             20            R_DINIT   segment code
0000             21   
0000             22   ;--------------------------------------------------------
0000             23   ; Public variables in this module
0000             24   ;--------------------------------------------------------
0000             25            public _main
0000             26            public _pwmcounter
0000             27            public _LineFollow
0000             28            public _AverageADC
0000             29            public _GetADC
0000             30            public _SPIWrite
0000             31            public _InitTimer0
0000             32            public _gain
0000             33            public _error
0000             34            public _rightInd
0000             35            public _leftInd
0000             36            public _pwmR
0000             37            public _pwmL
0000             38            public _pwmcount
0000             39   ;--------------------------------------------------------
0000             40   ; Special Function Registers
0000             41   ;--------------------------------------------------------
0000             42   _P1             DATA 0x90
0000             43   _P1M0           DATA 0xc2
0000             44   _P1M1           DATA 0xc3
0000             45   _P2             DATA 0xa0
0000             46   _P2M0           DATA 0xc4
0000             47   _P2M1           DATA 0xc5
0000             48   _P3             DATA 0xb0
0000             49   _P3M0           DATA 0xc5
0000             50   _P3M1           DATA 0xc6
0000             51   _P4             DATA 0xc0
0000             52   _P4M0           DATA 0xbe
0000             53   _P4M1           DATA 0xbf
0000             54   _PSW            DATA 0xd0
0000             55   _ACC            DATA 0xe0
0000             56   _B              DATA 0xf0
0000             57   _SP             DATA 0x81
0000             58   _DPL            DATA 0x82
0000             59   _DPH            DATA 0x83
0000             60   _DP0L           DATA 0x82
0000             61   _DP0H           DATA 0x83
0000             62   _DP1L           DATA 0x84
0000             63   _DP1H           DATA 0x85
0000             64   _AUXR           DATA 0x8e
0000             65   _AUXR1          DATA 0xa2
0000             66   _DPCF           DATA 0xa2
0000             67   _PAGE           DATA 0x86
0000             68   _TCON           DATA 0x88
0000             69   _TMOD           DATA 0x89
0000             70   _T2CON          DATA 0xc8
0000             71   _T2MOD          DATA 0xc9
0000             72   _TL0            DATA 0x8a
0000             73   _TL1            DATA 0x8b
0000             74   _TL2            DATA 0xcc
0000             75   _TH0            DATA 0x8c
0000             76   _TH1            DATA 0x8d
0000             77   _TH2            DATA 0xcd
0000             78   _TCONB          DATA 0x91
0000             79   _RL0            DATA 0x92
0000             80   _RL1            DATA 0x93
0000             81   _RH0            DATA 0x94
0000             82   _RH1            DATA 0x95
0000             83   _RCAP2L         DATA 0xca
0000             84   _RCAP2H         DATA 0xcb
0000             85   _WDTRST         DATA 0xa6
0000             86   _WDTCON         DATA 0xa7
0000             87   _SCON           DATA 0x98
0000             88   _SBUF           DATA 0x99
0000             89   _SADEN          DATA 0xb9
0000             90   _SADDR          DATA 0xa9
0000             91   _IE             DATA 0xa8
0000             92   _IP             DATA 0xb8
0000             93   _IPH            DATA 0xb7
0000             94   _IE2            DATA 0xb4
0000             95   _IP2            DATA 0xb5
0000             96   _IPH2           DATA 0xb6
0000             97   _T2CCA          DATA 0xd1
0000             98   _T2CCL          DATA 0xd2
0000             99   _T2CCH          DATA 0xd3
0000            100   _T2CCC          DATA 0xd4
0000            101   _T2CCF          DATA 0xd5
0000            102   _PCON           DATA 0x87
0000            103   _CLKREG         DATA 0x8f
0000            104   _GPMOD          DATA 0x9a
0000            105   _GPLS           DATA 0x9b
0000            106   _GPIEN          DATA 0x9c
0000            107   _GPIF           DATA 0x9d
0000            108   _SPSR           DATA 0xe8
0000            109   _SPCR           DATA 0xe9
0000            110   _SPDR           DATA 0xea
0000            111   _MEMCON         DATA 0x96
0000            112   _ACSRA          DATA 0x97
0000            113   _ACSRB          DATA 0x9f
0000            114   _AREF           DATA 0xaf
0000            115   ;--------------------------------------------------------
0000            116   ; special function bits
0000            117   ;--------------------------------------------------------
0000            118   _P1_7           BIT 0x97
0000            119   _P1_6           BIT 0x96
0000            120   _P1_5           BIT 0x95
0000            121   _P1_4           BIT 0x94
0000            122   _P1_3           BIT 0x93
0000            123   _P1_2           BIT 0x92
0000            124   _P1_1           BIT 0x91
0000            125   _P1_0           BIT 0x90
0000            126   _SCK            BIT 0x97
0000            127   _MISO           BIT 0x96
0000            128   _MOSI           BIT 0x95
0000            129   _SSB            BIT 0x94
0000            130   _T2EX           BIT 0x91
0000            131   _T2             BIT 0x90
0000            132   _P2_7           BIT 0xa7
0000            133   _P2_6           BIT 0xa6
0000            134   _P2_5           BIT 0xa5
0000            135   _P2_4           BIT 0xa4
0000            136   _P2_3           BIT 0xa3
0000            137   _P2_2           BIT 0xa2
0000            138   _P2_1           BIT 0xa1
0000            139   _P2_0           BIT 0xa0
0000            140   _CCD            BIT 0xa3
0000            141   _CCC            BIT 0xa2
0000            142   _CCB            BIT 0xa1
0000            143   _CCA            BIT 0xa0
0000            144   _P3_7           BIT 0xb7
0000            145   _P3_6           BIT 0xb6
0000            146   _P3_5           BIT 0xb5
0000            147   _P3_4           BIT 0xb4
0000            148   _P3_3           BIT 0xb3
0000            149   _P3_2           BIT 0xb2
0000            150   _P3_1           BIT 0xb1
0000            151   _P3_0           BIT 0xb0
0000            152   _T1             BIT 0xb5
0000            153   _T0             BIT 0xb4
0000            154   _INT1           BIT 0xb3
0000            155   _INT0           BIT 0xb2
0000            156   _TXD            BIT 0xb1
0000            157   _RXD            BIT 0xb0
0000            158   _P4_7           BIT 0xc7
0000            159   _P4_6           BIT 0xc6
0000            160   _P4_5           BIT 0xc5
0000            161   _P4_4           BIT 0xc4
0000            162   _P4_3           BIT 0xc3
0000            163   _P4_2           BIT 0xc2
0000            164   _P4_1           BIT 0xc1
0000            165   _P4_0           BIT 0xc0
0000            166   _XTAL2          BIT 0xc1
0000            167   _XTAL1          BIT 0xc0
0000            168   _CY             BIT 0xd7
0000            169   _AC             BIT 0xd6
0000            170   _F0             BIT 0xd5
0000            171   _RS1            BIT 0xd4
0000            172   _RS0            BIT 0xd3
0000            173   _OV             BIT 0xd2
0000            174   _UD             BIT 0xd1
0000            175   _P              BIT 0xd0
0000            176   _ACC_7          BIT 0xe7
0000            177   _ACC_6          BIT 0xe6
0000            178   _ACC_5          BIT 0xe5
0000            179   _ACC_4          BIT 0xe4
0000            180   _ACC_3          BIT 0xe3
0000            181   _ACC_2          BIT 0xe2
0000            182   _ACC_1          BIT 0xe1
0000            183   _ACC_0          BIT 0xe0
0000            184   _B_7            BIT 0xf7
0000            185   _B_6            BIT 0xf6
0000            186   _B_5            BIT 0xf5
0000            187   _B_4            BIT 0xf4
0000            188   _B_3            BIT 0xf3
0000            189   _B_2            BIT 0xf2
0000            190   _B_1            BIT 0xf1
0000            191   _B_0            BIT 0xf0
0000            192   _TF1            BIT 0x8f
0000            193   _TR1            BIT 0x8e
0000            194   _TF0            BIT 0x8d
0000            195   _TR0            BIT 0x8c
0000            196   _IE1            BIT 0x8b
0000            197   _IT1            BIT 0x8a
0000            198   _IE0            BIT 0x89
0000            199   _IT0            BIT 0x88
0000            200   _TF2            BIT 0xcf
0000            201   _EXF2           BIT 0xce
0000            202   _RCLK           BIT 0xcd
0000            203   _TCLK           BIT 0xcc
0000            204   _EXEN2          BIT 0xcb
0000            205   _TR2            BIT 0xca
0000            206   _C_T2           BIT 0xc9
0000            207   _CP_RL2         BIT 0xc8
0000            208   _SM0            BIT 0x9f
0000            209   _FE             BIT 0x9f
0000            210   _SM1            BIT 0x9e
0000            211   _SM2            BIT 0x9d
0000            212   _REN            BIT 0x9c
0000            213   _TB8            BIT 0x9b
0000            214   _RB8            BIT 0x9a
0000            215   _TI             BIT 0x99
0000            216   _RI             BIT 0x98
0000            217   _EA             BIT 0xaf
0000            218   _EC             BIT 0xae
0000            219   _ET2            BIT 0xad
0000            220   _ES             BIT 0xac
0000            221   _ET1            BIT 0xab
0000            222   _EX1            BIT 0xaa
0000            223   _ET0            BIT 0xa9
0000            224   _EX0            BIT 0xa8
0000            225   _PC             BIT 0xbe
0000            226   _PT2            BIT 0xbd
0000            227   _PS             BIT 0xbc
0000            228   _PT1            BIT 0xbb
0000            229   _PX1            BIT 0xba
0000            230   _PT0            BIT 0xb9
0000            231   _PX0            BIT 0xb8
0000            232   _SPIF           BIT 0xef
0000            233   _WCOL           BIT 0xee
0000            234   _MODF           BIT 0xed
0000            235   _TXE            BIT 0xec
0000            236   _SSIG           BIT 0xea
0000            237   _DISSO          BIT 0xe9
0000            238   _ENH            BIT 0xe8
0000            239   ;--------------------------------------------------------
0000            240   ; overlayable register banks
0000            241   ;--------------------------------------------------------
0000            242            rbank0 segment data overlay
0000            243   ;--------------------------------------------------------
0000            244   ; internal ram data
0000            245   ;--------------------------------------------------------
0000            246            rseg R_DSEG
0000            247   _pwmcount:
0000            248            ds 1
0001            249   _pwmL:
0001            250            ds 1
0002            251   _pwmR:
0002            252            ds 1
0003            253   _leftInd:
0003            254            ds 2
0005            255   _rightInd:
0005            256            ds 2
0007            257   _error:
0007            258            ds 2
0009            259   _gain:
0009            260            ds 2
000B            261   ;--------------------------------------------------------
000B            262   ; overlayable items in internal ram 
000B            263   ;--------------------------------------------------------
0000            264            rseg    R_OSEG
0000            265   ;--------------------------------------------------------
0000            266   ; indirectly addressable internal ram data
0000            267   ;--------------------------------------------------------
0000            268            rseg R_ISEG
0000            269   ;--------------------------------------------------------
0000            270   ; absolute internal ram data
0000            271   ;--------------------------------------------------------
0000            272            DSEG
0000            273   ;--------------------------------------------------------
0000            274   ; bit data
0000            275   ;--------------------------------------------------------
0000            276            rseg R_BSEG
0000            277   ;--------------------------------------------------------
0000            278   ; paged external ram data
0000            279   ;--------------------------------------------------------
0000            280            rseg R_XSEG
0000            281   ;--------------------------------------------------------
0000            282   ; external ram data
0000            283   ;--------------------------------------------------------
0000            284            rseg R_XSEG
0000            285   ;--------------------------------------------------------
0000            286   ; absolute external ram data
0000            287   ;--------------------------------------------------------
0000            288            XSEG
0000            289   ;--------------------------------------------------------
0000            290   ; external initialized ram data
0000            291   ;--------------------------------------------------------
0000            292            rseg R_IXSEG
0000            293            rseg R_HOME
0000            294            rseg R_GSINIT
0000            295            rseg R_CSEG
0000            296   ;--------------------------------------------------------
0000            297   ; Reset entry point and interrupt vectors
0000            298   ;--------------------------------------------------------
0000            299            CSEG at 0x0000
0000 020100     300            ljmp    _crt0
000B            301            CSEG at 0x000b
000B 020100     302            ljmp    _pwmcounter
000E            303   ;--------------------------------------------------------
000E            304   ; global & static initialisations
000E            305   ;--------------------------------------------------------
0000            306            rseg R_HOME
0000            307            rseg R_GSINIT
0000            308            rseg R_GSINIT
0000            309   ;--------------------------------------------------------
0000            310   ; data variables initialization
0000            311   ;--------------------------------------------------------
0000            312            rseg R_DINIT
0000            313            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            314   ;--------------------------------------------------------
0000            315   ; code
0000            316   ;--------------------------------------------------------
0000            317            rseg R_CSEG
0000            318   ;------------------------------------------------------------
0000            319   ;Allocation info for local variables in function 'InitTimer0'
0000            320   ;------------------------------------------------------------
0000            321   ;------------------------------------------------------------
0000            322   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:33: void InitTimer0 (void)
0000            323   ;        -----------------------------------------
0000            324   ;         function InitTimer0
0000            325   ;        -----------------------------------------
0000            326   _InitTimer0:
0000            327            using   0
0000            328   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:36: TR0=0; // Stop timer 0
0000 C28C       329            clr     _TR0
0002            330   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:37: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
0002 74F0       331            mov     a,#0xF0
0004 5589       332            anl     a,_TMOD
0006 4401       333            orl     a,#0x01
0008 F589       334            mov     _TMOD,a
000A            335   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:38: RH0=TIMER0_RELOAD_VALUE/0x100;
000A 7594FE     336            mov     _RH0,#0xFE
000D            337   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:39: RL0=TIMER0_RELOAD_VALUE%0x100;
000D 759290     338            mov     _RL0,#0x90
0010            339   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:40: TR0=1; // Start timer 0 (bit 4 in TCON)
0010 D28C       340            setb    _TR0
0012            341   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:41: ET0=1; // Enable timer 0 interrupt
0012 D2A9       342            setb    _ET0
0014            343   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:42: EA=1;  // Enable global interrupts
0014 D2AF       344            setb    _EA
0016 22         345            ret
0017            346   ;------------------------------------------------------------
0017            347   ;Allocation info for local variables in function 'SPIWrite'
0017            348   ;------------------------------------------------------------
0017            349   ;value                     Allocated to registers r2 
0017            350   ;------------------------------------------------------------
0017            351   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:45: void SPIWrite (unsigned char value)
0017            352   ;        -----------------------------------------
0017            353   ;         function SPIWrite
0017            354   ;        -----------------------------------------
0017            355   _SPIWrite:
0017 AA82       356            mov     r2,dpl
0019            357   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:47: SPIF=00;
0019 C2EF       358            clr     _SPIF
001B            359   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:48: SPDR=value;
001B 8AEA       360            mov     _SPDR,r2
001D            361   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:49: while (SPIF==0); // Wait for transmission to end
001D            362   L003001?:
001D 30EF58     363            jnb     _SPIF,L003001?
0020 22         364            ret
0021            365   ;------------------------------------------------------------
0021            366   ;Allocation info for local variables in function 'GetADC'
0021            367   ;------------------------------------------------------------
0021            368   ;channel                   Allocated to registers r2 
0021            369   ;adc                       Allocated to registers r2 r3 
0021            370   ;------------------------------------------------------------
0021            371   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:52: unsigned int GetADC (unsigned char channel) // Read 10 bits from the MCP3004 ADC converter
0021            372   ;        -----------------------------------------
0021            373   ;         function GetADC
0021            374   ;        -----------------------------------------
0021            375   _GetADC:
0021 AA82       376            mov     r2,dpl
0023            377   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:56: SSIG=1;
0023 D2EA       378            setb    _SSIG
0025            379   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:57: SPCR=SPE|MSTR|CPOL|CPHA|SPR1|SPR0; // Mode (1,1): see figure 6--2 of MCP3004 datasheet.
0025 75E95F     380            mov     _SPCR,#0x5F
0028            381   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:58: P1_4=0;                            // Activate the MCP3004 ADC.
0028 C294       382            clr     _P1_4
002A            383   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:59: SPIWrite(0x01);                    // Send the start bit.
002A 758201     384            mov     dpl,#0x01
002D C002       385            push    ar2
002F 120100     386            lcall   _SPIWrite
0032 D002       387            pop     ar2
0034            388   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:60: SPIWrite((channel*0x10)|0x80);     // Send single/diff* bit, D2, D1, and D0 bits.
0034 EA         389            mov     a,r2
0035 C4         390            swap    a
0036 54F0       391            anl     a,#0xf0
0038 FA         392            mov     r2,a
0039 7480       393            mov     a,#0x80
003B 4A         394            orl     a,r2
003C F582       395            mov     dpl,a
003E 120100     396            lcall   _SPIWrite
0041            397   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:61: adc=((SPDR & 0x03)*0x100);         // SPDR has the 2--most significant bits of volt.
0041 7403       398            mov     a,#0x03
0043 55EA       399            anl     a,_SPDR
0045 FB         400            mov     r3,a
0046 7A00       401            mov     r2,#0x00
0048            402   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:62: SPIWrite(0x55);                    // It doesn't matter what we send now.
0048 758255     403            mov     dpl,#0x55
004B C002       404            push    ar2
004D C003       405            push    ar3
004F 120100     406            lcall   _SPIWrite
0052 D003       407            pop     ar3
0054 D002       408            pop     ar2
0056            409   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:63: adc+=SPDR;                         // SPDR contains the low part of the result.
0056 ACEA       410            mov     r4,_SPDR
0058 7D00       411            mov     r5,#0x00
005A EC         412            mov     a,r4
005B 2A         413            add     a,r2
005C FA         414            mov     r2,a
005D ED         415            mov     a,r5
005E 3B         416            addc    a,r3
005F FB         417            mov     r3,a
0060            418   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:64: P1_4=1;                            // Deactivate the MCP3004 ADC.
0060 D294       419            setb    _P1_4
0062            420   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:65: return adc;
0062 8A82       421            mov     dpl,r2
0064 8B83       422            mov     dph,r3
0066 22         423            ret
0067            424   ;------------------------------------------------------------
0067            425   ;Allocation info for local variables in function 'AverageADC'
0067            426   ;------------------------------------------------------------
0067            427   ;channel                   Allocated to registers r2 
0067            428   ;sum                       Allocated to registers r3 r4 
0067            429   ;i                         Allocated to registers r5 r6 
0067            430   ;------------------------------------------------------------
0067            431   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:68: unsigned int AverageADC(unsigned char channel)      
0067            432   ;        -----------------------------------------
0067            433   ;         function AverageADC
0067            434   ;        -----------------------------------------
0067            435   _AverageADC:
0067 AA82       436            mov     r2,dpl
0069            437   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:70: unsigned int sum = 0;
0069 7B00       438            mov     r3,#0x00
006B 7C00       439            mov     r4,#0x00
006D            440   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:72: for(i=0; i<10; ++i)
006D 7D00       441            mov     r5,#0x00
006F 7E00       442            mov     r6,#0x00
0071            443   L005001?:
0071 C3         444            clr     c
0072 ED         445            mov     a,r5
0073 940A       446            subb    a,#0x0A
0075 EE         447            mov     a,r6
0076 6480       448            xrl     a,#0x80
0078 9480       449            subb    a,#0x80
007A 5001       450            jnc     L005004?
007C            451   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:74: sum += GetADC(channel);
007C 8A82       452            mov     dpl,r2
007E C002       453            push    ar2
0080 C003       454            push    ar3
0082 C004       455            push    ar4
0084 C005       456            push    ar5
0086 C006       457            push    ar6
0088 120100     458            lcall   _GetADC
008B AF82       459            mov     r7,dpl
008D A883       460            mov     r0,dph
008F D006       461            pop     ar6
0091 D005       462            pop     ar5
0093 D004       463            pop     ar4
0095 D003       464            pop     ar3
0097 D002       465            pop     ar2
0099 EF         466            mov     a,r7
009A 2B         467            add     a,r3
009B FB         468            mov     r3,a
009C E8         469            mov     a,r0
009D 3C         470            addc    a,r4
009E FC         471            mov     r4,a
009F            472   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:72: for(i=0; i<10; ++i)
009F 0D         473            inc     r5
00A0 BD00D8     474            cjne    r5,#0x00,L005001?
00A3 0E         475            inc     r6
00A4 8001       476            sjmp    L005001?
00A6            477   L005004?:
00A6            478   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:76: return sum/10;
00A6 75000A     479            mov     __divuint_PARM_2,#0x0A
00A9 E4         480            clr     a
00AA F501       481            mov     (__divuint_PARM_2 + 1),a
00AC 8B82       482            mov     dpl,r3
00AE 8C83       483            mov     dph,r4
00B0 020100     484            ljmp    __divuint
00B3            485   ;------------------------------------------------------------
00B3            486   ;Allocation info for local variables in function 'LineFollow'
00B3            487   ;------------------------------------------------------------
00B3            488   ;------------------------------------------------------------
00B3            489   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:79: void LineFollow()
00B3            490   ;        -----------------------------------------
00B3            491   ;         function LineFollow
00B3            492   ;        -----------------------------------------
00B3            493   _LineFollow:
00B3            494   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:81: leftInd = AverageADC(INDUCTOR_LEFT_CH); //amplification done in software because the inductors are different
00B3 758200     495            mov     dpl,#0x00
00B6 120100     496            lcall   _AverageADC
00B9 858270     497            mov     _leftInd,dpl
00BC 858371     498            mov     (_leftInd + 1),dph
00BF            499   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:82: rightInd = AverageADC(INDUCTOR_RIGHT_CH);
00BF 758201     500            mov     dpl,#0x01
00C2 120100     501            lcall   _AverageADC
00C5 858230     502            mov     _rightInd,dpl
00C8 858331     503            mov     (_rightInd + 1),dph
00CB            504   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:84: error = leftInd - rightInd;
00CB E570       505            mov     a,_leftInd
00CD C3         506            clr     c
00CE 9530       507            subb    a,_rightInd
00D0 F5F0       508            mov     _error,a
00D2 E571       509            mov     a,(_leftInd + 1)
00D4 9531       510            subb    a,(_rightInd + 1)
00D6 F5F1       511            mov     (_error + 1),a
00D8            512   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:88: gain = KP*error;
00D8 85F082     513            mov     dpl,_error
00DB 85F183     514            mov     dph,(_error + 1)
00DE 120100     515            lcall   ___sint2fs
00E1 AA82       516            mov     r2,dpl
00E3 AB83       517            mov     r3,dph
00E5 ACF0       518            mov     r4,b
00E7 FD         519            mov     r5,a
00E8 C002       520            push    ar2
00EA C003       521            push    ar3
00EC C004       522            push    ar4
00EE C005       523            push    ar5
00F0 900000     524            mov     dptr,#0x0000
00F3 75F060     525            mov     b,#0x60
00F6 7440       526            mov     a,#0x40
00F8 120100     527            lcall   ___fsmul
00FB AA82       528            mov     r2,dpl
00FD AB83       529            mov     r3,dph
00FF ACF0       530            mov     r4,b
0101 FD         531            mov     r5,a
0102 E581       532            mov     a,sp
0104 24FC       533            add     a,#0xfc
0106 F581       534            mov     sp,a
0108 8A82       535            mov     dpl,r2
010A 8B83       536            mov     dph,r3
010C 8CF0       537            mov     b,r4
010E ED         538            mov     a,r5
010F 120100     539            lcall   ___fs2sint
0112 8582B0     540            mov     _gain,dpl
0115 8583B1     541            mov     (_gain + 1),dph
0118            542   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:90: if(error > 0)
0118 C3         543            clr     c
0119 E4         544            clr     a
011A 95F0       545            subb    a,_error
011C E4         546            clr     a
011D 6480       547            xrl     a,#0x80
011F 85F1F0     548            mov     b,(_error + 1)
0122 63F080     549            xrl     b,#0x80
0125 95F0       550            subb    a,b
0127 5001       551            jnc     L006002?
0129            552   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:92: pwmL = (gain<100)?100-gain:0; //stops pwml from going negative. 
0129 C3         553            clr     c
012A E5B0       554            mov     a,_gain
012C 9464       555            subb    a,#0x64
012E E5B1       556            mov     a,(_gain + 1)
0130 6480       557            xrl     a,#0x80
0132 9480       558            subb    a,#0x80
0134 5001       559            jnc     L006006?
0136 AAB0       560            mov     r2,_gain
0138 7464       561            mov     a,#0x64
013A C3         562            clr     c
013B 9A         563            subb    a,r2
013C FA         564            mov     r2,a
013D 8001       565            sjmp    L006007?
013F            566   L006006?:
013F 7A00       567            mov     r2,#0x00
0141            568   L006007?:
0141 8AF0       569            mov     _pwmL,r2
0143            570   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:93: pwmR = 100;
0143 75B064     571            mov     _pwmR,#0x64
0146 22         572            ret
0147            573   L006002?:
0147            574   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:97: gain *= -1;
0147 C3         575            clr     c
0148 E4         576            clr     a
0149 95B0       577            subb    a,_gain
014B F5B0       578            mov     _gain,a
014D E4         579            clr     a
014E 95B1       580            subb    a,(_gain + 1)
0150 F5B1       581            mov     (_gain + 1),a
0152            582   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:98: pwmL = 100;
0152 75F064     583            mov     _pwmL,#0x64
0155            584   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:99: pwmR = (gain<100)?100-gain:0;       
0155 C3         585            clr     c
0156 E5B0       586            mov     a,_gain
0158 9464       587            subb    a,#0x64
015A E5B1       588            mov     a,(_gain + 1)
015C 6480       589            xrl     a,#0x80
015E 9480       590            subb    a,#0x80
0160 5001       591            jnc     L006008?
0162 AAB0       592            mov     r2,_gain
0164 7464       593            mov     a,#0x64
0166 C3         594            clr     c
0167 9A         595            subb    a,r2
0168 FA         596            mov     r2,a
0169 8001       597            sjmp    L006009?
016B            598   L006008?:
016B 7A00       599            mov     r2,#0x00
016D            600   L006009?:
016D 8AB0       601            mov     _pwmR,r2
016F 22         602            ret
0170            603   ;------------------------------------------------------------
0170            604   ;Allocation info for local variables in function 'pwmcounter'
0170            605   ;------------------------------------------------------------
0170            606   ;------------------------------------------------------------
0170            607   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:105: void pwmcounter (void) interrupt 1
0170            608   ;        -----------------------------------------
0170            609   ;         function pwmcounter
0170            610   ;        -----------------------------------------
0170            611   _pwmcounter:
0170 C0E0       612            push    acc
0172 C0D0       613            push    psw
0174 75D000     614            mov     psw,#0x00
0177            615   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:107: if(++pwmcount>99) pwmcount=0;
0177 0530       616            inc     _pwmcount
0179 E530       617            mov     a,_pwmcount
017B 249C       618            add     a,#0xff - 0x63
017D 5001       619            jnc     L007002?
017F 753000     620            mov     _pwmcount,#0x00
0182            621   L007002?:
0182            622   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:108: P1_0=(pwmL>pwmcount)?1:0;
0182 C3         623            clr     c
0183 E530       624            mov     a,_pwmcount
0185 95F0       625            subb    a,_pwmL
0187 9290       626            mov     _P1_0,c
0189            627   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:109: P1_1=(pwmR>pwmcount)?1:0;  
0189 C3         628            clr     c
018A E530       629            mov     a,_pwmcount
018C 95B0       630            subb    a,_pwmR
018E 9291       631            mov     _P1_1,c
0190 D0D0       632            pop     psw
0192 D0E0       633            pop     acc
0194 32         634            reti
0195            635   ;        eliminated unneeded push/pop dpl
0195            636   ;        eliminated unneeded push/pop dph
0195            637   ;        eliminated unneeded push/pop b
0195            638   ;------------------------------------------------------------
0195            639   ;Allocation info for local variables in function 'main'
0195            640   ;------------------------------------------------------------
0195            641   ;------------------------------------------------------------
0195            642   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:112: void main (void)
0195            643   ;        -----------------------------------------
0195            644   ;         function main
0195            645   ;        -----------------------------------------
0195            646   _main:
0195            647   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:114: setbaud_timer2(TIMER_2_RELOAD); // Initialize serial port using timer 2 
0195 90FFFE     648            mov     dptr,#0xFFFE
0198 120100     649            lcall   _setbaud_timer2
019B            650   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:115: InitTimer0(); // Initialize timer 0 and its interrupt
019B 120100     651            lcall   _InitTimer0
019E            652   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:116: pwmL=0; //% duty cycle wave at 100Hz
019E 75F000     653            mov     _pwmL,#0x00
01A1            654   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:117: pwmR=0;    
01A1 75B000     655            mov     _pwmR,#0x00
01A4            656   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:119: while(1)
01A4            657   L008002?:
01A4            658   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:121: LineFollow();
01A4 120100     659            lcall   _LineFollow
01A7 8001       660            sjmp    L008002?
01A9            661            rseg R_CSEG
01A9            662   
0000            663            rseg R_CONST
0000            664   
0000            665            rseg R_XINIT
0000            666   
000E            667            CSEG
000E            668   
000E            669   end
