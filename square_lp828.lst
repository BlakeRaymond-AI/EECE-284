0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1034 (Dec 12 2012) (MSVC)
0000              4   ; This file was generated Sun Mar 17 17:53:21 2013
0000              5   ;--------------------------------------------------------
                  5   $name square_lp828
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_ISEG    segment idata
0000             13            R_OSEG    segment data overlay
0000             14            BIT_BANK  segment data overlay
0000             15            R_HOME    segment code
0000             16            R_GSINIT  segment code
0000             17            R_IXSEG   segment xdata
0000             18            R_CONST   segment code
0000             19            R_XINIT   segment code
0000             20            R_DINIT   segment code
0000             21   
0000             22   ;--------------------------------------------------------
0000             23   ; Public variables in this module
0000             24   ;--------------------------------------------------------
0000             25            public _main
0000             26            public _pwmcounter
0000             27            public _LineFollow
0000             28            public _OnOffControl
0000             29            public _wait
0000             30            public _GetADC
0000             31            public _SPIWrite
0000             32            public _InitTimer0
0000             33            public _gain
0000             34            public _error
0000             35            public _rightInd
0000             36            public _leftInd
0000             37            public _pwmR
0000             38            public _pwmL
0000             39            public _pwmcount
0000             40   ;--------------------------------------------------------
0000             41   ; Special Function Registers
0000             42   ;--------------------------------------------------------
0000             43   _P1             DATA 0x90
0000             44   _P1M0           DATA 0xc2
0000             45   _P1M1           DATA 0xc3
0000             46   _P2             DATA 0xa0
0000             47   _P2M0           DATA 0xc4
0000             48   _P2M1           DATA 0xc5
0000             49   _P3             DATA 0xb0
0000             50   _P3M0           DATA 0xc5
0000             51   _P3M1           DATA 0xc6
0000             52   _P4             DATA 0xc0
0000             53   _P4M0           DATA 0xbe
0000             54   _P4M1           DATA 0xbf
0000             55   _PSW            DATA 0xd0
0000             56   _ACC            DATA 0xe0
0000             57   _B              DATA 0xf0
0000             58   _SP             DATA 0x81
0000             59   _DPL            DATA 0x82
0000             60   _DPH            DATA 0x83
0000             61   _DP0L           DATA 0x82
0000             62   _DP0H           DATA 0x83
0000             63   _DP1L           DATA 0x84
0000             64   _DP1H           DATA 0x85
0000             65   _AUXR           DATA 0x8e
0000             66   _AUXR1          DATA 0xa2
0000             67   _DPCF           DATA 0xa2
0000             68   _PAGE           DATA 0x86
0000             69   _TCON           DATA 0x88
0000             70   _TMOD           DATA 0x89
0000             71   _T2CON          DATA 0xc8
0000             72   _T2MOD          DATA 0xc9
0000             73   _TL0            DATA 0x8a
0000             74   _TL1            DATA 0x8b
0000             75   _TL2            DATA 0xcc
0000             76   _TH0            DATA 0x8c
0000             77   _TH1            DATA 0x8d
0000             78   _TH2            DATA 0xcd
0000             79   _TCONB          DATA 0x91
0000             80   _RL0            DATA 0x92
0000             81   _RL1            DATA 0x93
0000             82   _RH0            DATA 0x94
0000             83   _RH1            DATA 0x95
0000             84   _RCAP2L         DATA 0xca
0000             85   _RCAP2H         DATA 0xcb
0000             86   _WDTRST         DATA 0xa6
0000             87   _WDTCON         DATA 0xa7
0000             88   _SCON           DATA 0x98
0000             89   _SBUF           DATA 0x99
0000             90   _SADEN          DATA 0xb9
0000             91   _SADDR          DATA 0xa9
0000             92   _IE             DATA 0xa8
0000             93   _IP             DATA 0xb8
0000             94   _IPH            DATA 0xb7
0000             95   _IE2            DATA 0xb4
0000             96   _IP2            DATA 0xb5
0000             97   _IPH2           DATA 0xb6
0000             98   _T2CCA          DATA 0xd1
0000             99   _T2CCL          DATA 0xd2
0000            100   _T2CCH          DATA 0xd3
0000            101   _T2CCC          DATA 0xd4
0000            102   _T2CCF          DATA 0xd5
0000            103   _PCON           DATA 0x87
0000            104   _CLKREG         DATA 0x8f
0000            105   _GPMOD          DATA 0x9a
0000            106   _GPLS           DATA 0x9b
0000            107   _GPIEN          DATA 0x9c
0000            108   _GPIF           DATA 0x9d
0000            109   _SPSR           DATA 0xe8
0000            110   _SPCR           DATA 0xe9
0000            111   _SPDR           DATA 0xea
0000            112   _MEMCON         DATA 0x96
0000            113   _ACSRA          DATA 0x97
0000            114   _ACSRB          DATA 0x9f
0000            115   _AREF           DATA 0xaf
0000            116   ;--------------------------------------------------------
0000            117   ; special function bits
0000            118   ;--------------------------------------------------------
0000            119   _P1_7           BIT 0x97
0000            120   _P1_6           BIT 0x96
0000            121   _P1_5           BIT 0x95
0000            122   _P1_4           BIT 0x94
0000            123   _P1_3           BIT 0x93
0000            124   _P1_2           BIT 0x92
0000            125   _P1_1           BIT 0x91
0000            126   _P1_0           BIT 0x90
0000            127   _SCK            BIT 0x97
0000            128   _MISO           BIT 0x96
0000            129   _MOSI           BIT 0x95
0000            130   _SSB            BIT 0x94
0000            131   _T2EX           BIT 0x91
0000            132   _T2             BIT 0x90
0000            133   _P2_7           BIT 0xa7
0000            134   _P2_6           BIT 0xa6
0000            135   _P2_5           BIT 0xa5
0000            136   _P2_4           BIT 0xa4
0000            137   _P2_3           BIT 0xa3
0000            138   _P2_2           BIT 0xa2
0000            139   _P2_1           BIT 0xa1
0000            140   _P2_0           BIT 0xa0
0000            141   _CCD            BIT 0xa3
0000            142   _CCC            BIT 0xa2
0000            143   _CCB            BIT 0xa1
0000            144   _CCA            BIT 0xa0
0000            145   _P3_7           BIT 0xb7
0000            146   _P3_6           BIT 0xb6
0000            147   _P3_5           BIT 0xb5
0000            148   _P3_4           BIT 0xb4
0000            149   _P3_3           BIT 0xb3
0000            150   _P3_2           BIT 0xb2
0000            151   _P3_1           BIT 0xb1
0000            152   _P3_0           BIT 0xb0
0000            153   _T1             BIT 0xb5
0000            154   _T0             BIT 0xb4
0000            155   _INT1           BIT 0xb3
0000            156   _INT0           BIT 0xb2
0000            157   _TXD            BIT 0xb1
0000            158   _RXD            BIT 0xb0
0000            159   _P4_7           BIT 0xc7
0000            160   _P4_6           BIT 0xc6
0000            161   _P4_5           BIT 0xc5
0000            162   _P4_4           BIT 0xc4
0000            163   _P4_3           BIT 0xc3
0000            164   _P4_2           BIT 0xc2
0000            165   _P4_1           BIT 0xc1
0000            166   _P4_0           BIT 0xc0
0000            167   _XTAL2          BIT 0xc1
0000            168   _XTAL1          BIT 0xc0
0000            169   _CY             BIT 0xd7
0000            170   _AC             BIT 0xd6
0000            171   _F0             BIT 0xd5
0000            172   _RS1            BIT 0xd4
0000            173   _RS0            BIT 0xd3
0000            174   _OV             BIT 0xd2
0000            175   _UD             BIT 0xd1
0000            176   _P              BIT 0xd0
0000            177   _ACC_7          BIT 0xe7
0000            178   _ACC_6          BIT 0xe6
0000            179   _ACC_5          BIT 0xe5
0000            180   _ACC_4          BIT 0xe4
0000            181   _ACC_3          BIT 0xe3
0000            182   _ACC_2          BIT 0xe2
0000            183   _ACC_1          BIT 0xe1
0000            184   _ACC_0          BIT 0xe0
0000            185   _B_7            BIT 0xf7
0000            186   _B_6            BIT 0xf6
0000            187   _B_5            BIT 0xf5
0000            188   _B_4            BIT 0xf4
0000            189   _B_3            BIT 0xf3
0000            190   _B_2            BIT 0xf2
0000            191   _B_1            BIT 0xf1
0000            192   _B_0            BIT 0xf0
0000            193   _TF1            BIT 0x8f
0000            194   _TR1            BIT 0x8e
0000            195   _TF0            BIT 0x8d
0000            196   _TR0            BIT 0x8c
0000            197   _IE1            BIT 0x8b
0000            198   _IT1            BIT 0x8a
0000            199   _IE0            BIT 0x89
0000            200   _IT0            BIT 0x88
0000            201   _TF2            BIT 0xcf
0000            202   _EXF2           BIT 0xce
0000            203   _RCLK           BIT 0xcd
0000            204   _TCLK           BIT 0xcc
0000            205   _EXEN2          BIT 0xcb
0000            206   _TR2            BIT 0xca
0000            207   _C_T2           BIT 0xc9
0000            208   _CP_RL2         BIT 0xc8
0000            209   _SM0            BIT 0x9f
0000            210   _FE             BIT 0x9f
0000            211   _SM1            BIT 0x9e
0000            212   _SM2            BIT 0x9d
0000            213   _REN            BIT 0x9c
0000            214   _TB8            BIT 0x9b
0000            215   _RB8            BIT 0x9a
0000            216   _TI             BIT 0x99
0000            217   _RI             BIT 0x98
0000            218   _EA             BIT 0xaf
0000            219   _EC             BIT 0xae
0000            220   _ET2            BIT 0xad
0000            221   _ES             BIT 0xac
0000            222   _ET1            BIT 0xab
0000            223   _EX1            BIT 0xaa
0000            224   _ET0            BIT 0xa9
0000            225   _EX0            BIT 0xa8
0000            226   _PC             BIT 0xbe
0000            227   _PT2            BIT 0xbd
0000            228   _PS             BIT 0xbc
0000            229   _PT1            BIT 0xbb
0000            230   _PX1            BIT 0xba
0000            231   _PT0            BIT 0xb9
0000            232   _PX0            BIT 0xb8
0000            233   _SPIF           BIT 0xef
0000            234   _WCOL           BIT 0xee
0000            235   _MODF           BIT 0xed
0000            236   _TXE            BIT 0xec
0000            237   _SSIG           BIT 0xea
0000            238   _DISSO          BIT 0xe9
0000            239   _ENH            BIT 0xe8
0000            240   ;--------------------------------------------------------
0000            241   ; overlayable register banks
0000            242   ;--------------------------------------------------------
0000            243            rbank0 segment data overlay
0000            244   ;--------------------------------------------------------
0000            245   ; internal ram data
0000            246   ;--------------------------------------------------------
0000            247            rseg R_DSEG
0000            248   _pwmcount:
0000            249            ds 1
0001            250   _pwmL:
0001            251            ds 1
0002            252   _pwmR:
0002            253            ds 1
0003            254   _leftInd:
0003            255            ds 2
0005            256   _rightInd:
0005            257            ds 2
0007            258   _error:
0007            259            ds 2
0009            260   _gain:
0009            261            ds 2
000B            262   ;--------------------------------------------------------
000B            263   ; overlayable items in internal ram 
000B            264   ;--------------------------------------------------------
0000            265            rseg    R_OSEG
0000            266            rseg    R_OSEG
0000            267   ;--------------------------------------------------------
0000            268   ; indirectly addressable internal ram data
0000            269   ;--------------------------------------------------------
0000            270            rseg R_ISEG
0000            271   ;--------------------------------------------------------
0000            272   ; absolute internal ram data
0000            273   ;--------------------------------------------------------
0000            274            DSEG
0000            275   ;--------------------------------------------------------
0000            276   ; bit data
0000            277   ;--------------------------------------------------------
0000            278            rseg R_BSEG
0000            279   ;--------------------------------------------------------
0000            280   ; paged external ram data
0000            281   ;--------------------------------------------------------
0000            282            rseg R_XSEG
0000            283   ;--------------------------------------------------------
0000            284   ; external ram data
0000            285   ;--------------------------------------------------------
0000            286            rseg R_XSEG
0000            287   ;--------------------------------------------------------
0000            288   ; absolute external ram data
0000            289   ;--------------------------------------------------------
0000            290            XSEG
0000            291   ;--------------------------------------------------------
0000            292   ; external initialized ram data
0000            293   ;--------------------------------------------------------
0000            294            rseg R_IXSEG
0000            295            rseg R_HOME
0000            296            rseg R_GSINIT
0000            297            rseg R_CSEG
0000            298   ;--------------------------------------------------------
0000            299   ; Reset entry point and interrupt vectors
0000            300   ;--------------------------------------------------------
0000            301            CSEG at 0x0000
0000 020100     302            ljmp    _crt0
000B            303            CSEG at 0x000b
000B 020100     304            ljmp    _pwmcounter
000E            305   ;--------------------------------------------------------
000E            306   ; global & static initialisations
000E            307   ;--------------------------------------------------------
0000            308            rseg R_HOME
0000            309            rseg R_GSINIT
0000            310            rseg R_GSINIT
0000            311   ;--------------------------------------------------------
0000            312   ; data variables initialization
0000            313   ;--------------------------------------------------------
0000            314            rseg R_DINIT
0000            315            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            316   ;--------------------------------------------------------
0000            317   ; code
0000            318   ;--------------------------------------------------------
0000            319            rseg R_CSEG
0000            320   ;------------------------------------------------------------
0000            321   ;Allocation info for local variables in function 'InitTimer0'
0000            322   ;------------------------------------------------------------
0000            323   ;------------------------------------------------------------
0000            324   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:30: void InitTimer0 (void)
0000            325   ;        -----------------------------------------
0000            326   ;         function InitTimer0
0000            327   ;        -----------------------------------------
0000            328   _InitTimer0:
0000            329            using   0
0000            330   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:33: TR0=0; // Stop timer 0
0000 C28C       331            clr     _TR0
0002            332   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:34: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
0002 74F0       333            mov     a,#0xF0
0004 5589       334            anl     a,_TMOD
0006 4401       335            orl     a,#0x01
0008 F589       336            mov     _TMOD,a
000A            337   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:35: RH0=TIMER0_RELOAD_VALUE/0x100;
000A 7594FE     338            mov     _RH0,#0xFE
000D            339   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:36: RL0=TIMER0_RELOAD_VALUE%0x100;
000D 759290     340            mov     _RL0,#0x90
0010            341   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:37: TR0=1; // Start timer 0 (bit 4 in TCON)
0010 D28C       342            setb    _TR0
0012            343   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:38: ET0=1; // Enable timer 0 interrupt
0012 D2A9       344            setb    _ET0
0014            345   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:39: EA=1;  // Enable global interrupts
0014 D2AF       346            setb    _EA
0016 22         347            ret
0017            348   ;------------------------------------------------------------
0017            349   ;Allocation info for local variables in function 'SPIWrite'
0017            350   ;------------------------------------------------------------
0017            351   ;value                     Allocated to registers r2 
0017            352   ;------------------------------------------------------------
0017            353   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:42: void SPIWrite (unsigned char value)
0017            354   ;        -----------------------------------------
0017            355   ;         function SPIWrite
0017            356   ;        -----------------------------------------
0017            357   _SPIWrite:
0017 AA82       358            mov     r2,dpl
0019            359   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:44: SPIF=00;
0019 C2EF       360            clr     _SPIF
001B            361   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:45: SPDR=value;
001B 8AEA       362            mov     _SPDR,r2
001D            363   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:46: while (SPIF==0); // Wait for transmission to end
001D            364   L003001?:
001D 30EF98     365            jnb     _SPIF,L003001?
0020 22         366            ret
0021            367   ;------------------------------------------------------------
0021            368   ;Allocation info for local variables in function 'GetADC'
0021            369   ;------------------------------------------------------------
0021            370   ;channel                   Allocated to registers r2 
0021            371   ;adc                       Allocated to registers r2 r3 
0021            372   ;------------------------------------------------------------
0021            373   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:49: unsigned int GetADC (unsigned char channel) // Read 10 bits from the MCP3004 ADC converter
0021            374   ;        -----------------------------------------
0021            375   ;         function GetADC
0021            376   ;        -----------------------------------------
0021            377   _GetADC:
0021 AA82       378            mov     r2,dpl
0023            379   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:53: SSIG=1;
0023 D2EA       380            setb    _SSIG
0025            381   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:54: SPCR=SPE|MSTR|CPOL|CPHA|SPR1|SPR0; // Mode (1,1): see figure 6--2 of MCP3004 datasheet.
0025 75E95F     382            mov     _SPCR,#0x5F
0028            383   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:55: P1_4=0;                            // Activate the MCP3004 ADC.
0028 C294       384            clr     _P1_4
002A            385   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:56: SPIWrite(0x01);                    // Send the start bit.
002A 758201     386            mov     dpl,#0x01
002D C002       387            push    ar2
002F 120100     388            lcall   _SPIWrite
0032 D002       389            pop     ar2
0034            390   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:57: SPIWrite((channel*0x10)|0x80);     // Send single/diff* bit, D2, D1, and D0 bits.
0034 EA         391            mov     a,r2
0035 C4         392            swap    a
0036 54F0       393            anl     a,#0xf0
0038 FA         394            mov     r2,a
0039 7480       395            mov     a,#0x80
003B 4A         396            orl     a,r2
003C F582       397            mov     dpl,a
003E 120100     398            lcall   _SPIWrite
0041            399   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:58: adc=((SPDR & 0x03)*0x100);         // SPDR has the 2--most significant bits of volt.
0041 7403       400            mov     a,#0x03
0043 55EA       401            anl     a,_SPDR
0045 FB         402            mov     r3,a
0046 7A00       403            mov     r2,#0x00
0048            404   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:59: SPIWrite(0x55);                    // It doesn't matter what we send now.
0048 758255     405            mov     dpl,#0x55
004B C002       406            push    ar2
004D C003       407            push    ar3
004F 120100     408            lcall   _SPIWrite
0052 D003       409            pop     ar3
0054 D002       410            pop     ar2
0056            411   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:60: adc+=SPDR;                         // SPDR contains the low part of the result.
0056 ACEA       412            mov     r4,_SPDR
0058 7D00       413            mov     r5,#0x00
005A EC         414            mov     a,r4
005B 2A         415            add     a,r2
005C FA         416            mov     r2,a
005D ED         417            mov     a,r5
005E 3B         418            addc    a,r3
005F FB         419            mov     r3,a
0060            420   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:61: P1_4=1;                            // Deactivate the MCP3004 ADC.
0060 D294       421            setb    _P1_4
0062            422   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:62: return adc;
0062 8A82       423            mov     dpl,r2
0064 8B83       424            mov     dph,r3
0066 22         425            ret
0067            426   ;------------------------------------------------------------
0067            427   ;Allocation info for local variables in function 'wait'
0067            428   ;------------------------------------------------------------
0067            429   ;time                      Allocated to registers r2 r3 
0067            430   ;------------------------------------------------------------
0067            431   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:65: void wait(int time) //10000 = 5ms
0067            432   ;        -----------------------------------------
0067            433   ;         function wait
0067            434   ;        -----------------------------------------
0067            435   _wait:
0067 AA82       436            mov     r2,dpl
0069 AB83       437            mov     r3,dph
006B            438   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:67: while(--time);
006B            439   L005001?:
006B 1A         440            dec     r2
006C BAFF58     441            cjne    r2,#0xff,L005008?
006F 1B         442            dec     r3
0070            443   L005008?:
0070 EA         444            mov     a,r2
0071 4B         445            orl     a,r3
0072 7001       446            jnz     L005001?
0074 22         447            ret
0075            448   ;------------------------------------------------------------
0075            449   ;Allocation info for local variables in function 'OnOffControl'
0075            450   ;------------------------------------------------------------
0075            451   ;------------------------------------------------------------
0075            452   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:70: void OnOffControl()
0075            453   ;        -----------------------------------------
0075            454   ;         function OnOffControl
0075            455   ;        -----------------------------------------
0075            456   _OnOffControl:
0075            457   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:72: leftInd = GetADC(INDUCTOR_LEFT_CH);
0075 758200     458            mov     dpl,#0x00
0078 120100     459            lcall   _GetADC
007B 8582B0     460            mov     _leftInd,dpl
007E 8583B1     461            mov     (_leftInd + 1),dph
0081            462   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:73: rightInd = GetADC(INDUCTOR_RIGHT_CH);
0081 758201     463            mov     dpl,#0x01
0084 120100     464            lcall   _GetADC
0087 858270     465            mov     _rightInd,dpl
008A 858371     466            mov     (_rightInd + 1),dph
008D            467   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:75: if(leftInd > rightInd)
008D C3         468            clr     c
008E E570       469            mov     a,_rightInd
0090 95B0       470            subb    a,_leftInd
0092 E571       471            mov     a,(_rightInd + 1)
0094 95B1       472            subb    a,(_leftInd + 1)
0096 5001       473            jnc     L006002?
0098            474   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:77: pwmL = 0;
0098 753000     475            mov     _pwmL,#0x00
009B            476   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:78: pwmR = 100;
009B 75F064     477            mov     _pwmR,#0x64
009E 22         478            ret
009F            479   L006002?:
009F            480   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:82: pwmL = 100;
009F 753064     481            mov     _pwmL,#0x64
00A2            482   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:83: pwmR = 0;           
00A2 75F000     483            mov     _pwmR,#0x00
00A5 22         484            ret
00A6            485   ;------------------------------------------------------------
00A6            486   ;Allocation info for local variables in function 'LineFollow'
00A6            487   ;------------------------------------------------------------
00A6            488   ;------------------------------------------------------------
00A6            489   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:89: void LineFollow()
00A6            490   ;        -----------------------------------------
00A6            491   ;         function LineFollow
00A6            492   ;        -----------------------------------------
00A6            493   _LineFollow:
00A6            494   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:91: leftInd = GetADC(INDUCTOR_LEFT_CH);
00A6 758200     495            mov     dpl,#0x00
00A9 120100     496            lcall   _GetADC
00AC 8582B0     497            mov     _leftInd,dpl
00AF 8583B1     498            mov     (_leftInd + 1),dph
00B2            499   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:92: rightInd = GetADC(INDUCTOR_RIGHT_CH);
00B2 758201     500            mov     dpl,#0x01
00B5 120100     501            lcall   _GetADC
00B8 858270     502            mov     _rightInd,dpl
00BB 858371     503            mov     (_rightInd + 1),dph
00BE            504   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:94: error = leftInd - rightInd;
00BE E5B0       505            mov     a,_leftInd
00C0 C3         506            clr     c
00C1 9570       507            subb    a,_rightInd
00C3 F530       508            mov     _error,a
00C5 E5B1       509            mov     a,(_leftInd + 1)
00C7 9571       510            subb    a,(_rightInd + 1)
00C9 F531       511            mov     (_error + 1),a
00CB            512   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:97: gain = KP*error;
00CB 853082     513            mov     dpl,_error
00CE 853183     514            mov     dph,(_error + 1)
00D1 120100     515            lcall   ___sint2fs
00D4 AA82       516            mov     r2,dpl
00D6 AB83       517            mov     r3,dph
00D8 ACF0       518            mov     r4,b
00DA FD         519            mov     r5,a
00DB C002       520            push    ar2
00DD C003       521            push    ar3
00DF C004       522            push    ar4
00E1 C005       523            push    ar5
00E3 900000     524            mov     dptr,#0x0000
00E6 75F080     525            mov     b,#0x80
00E9 743E       526            mov     a,#0x3E
00EB 120100     527            lcall   ___fsmul
00EE AA82       528            mov     r2,dpl
00F0 AB83       529            mov     r3,dph
00F2 ACF0       530            mov     r4,b
00F4 FD         531            mov     r5,a
00F5 E581       532            mov     a,sp
00F7 24FC       533            add     a,#0xfc
00F9 F581       534            mov     sp,a
00FB 8A82       535            mov     dpl,r2
00FD 8B83       536            mov     dph,r3
00FF 8CF0       537            mov     b,r4
0101 ED         538            mov     a,r5
0102 120100     539            lcall   ___fs2sint
0105 8582F0     540            mov     _gain,dpl
0108 8583F1     541            mov     (_gain + 1),dph
010B            542   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:99: if(error > 0)
010B C3         543            clr     c
010C E4         544            clr     a
010D 9530       545            subb    a,_error
010F E4         546            clr     a
0110 6480       547            xrl     a,#0x80
0112 8531F0     548            mov     b,(_error + 1)
0115 63F080     549            xrl     b,#0x80
0118 95F0       550            subb    a,b
011A 5001       551            jnc     L007002?
011C            552   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:101: pwmL = (gain<100)?100-gain:0;
011C C3         553            clr     c
011D E5F0       554            mov     a,_gain
011F 9464       555            subb    a,#0x64
0121 E5F1       556            mov     a,(_gain + 1)
0123 6480       557            xrl     a,#0x80
0125 9480       558            subb    a,#0x80
0127 5001       559            jnc     L007006?
0129 AAF0       560            mov     r2,_gain
012B 7464       561            mov     a,#0x64
012D C3         562            clr     c
012E 9A         563            subb    a,r2
012F FA         564            mov     r2,a
0130 8001       565            sjmp    L007007?
0132            566   L007006?:
0132 7A00       567            mov     r2,#0x00
0134            568   L007007?:
0134 8A30       569            mov     _pwmL,r2
0136            570   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:102: pwmR = 100;
0136 75F064     571            mov     _pwmR,#0x64
0139 22         572            ret
013A            573   L007002?:
013A            574   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:106: gain *= -1;
013A C3         575            clr     c
013B E4         576            clr     a
013C 95F0       577            subb    a,_gain
013E F5F0       578            mov     _gain,a
0140 E4         579            clr     a
0141 95F1       580            subb    a,(_gain + 1)
0143 F5F1       581            mov     (_gain + 1),a
0145            582   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:107: pwmL = 100;
0145 753064     583            mov     _pwmL,#0x64
0148            584   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:108: pwmR = (gain<100)?100-gain:0;      
0148 C3         585            clr     c
0149 E5F0       586            mov     a,_gain
014B 9464       587            subb    a,#0x64
014D E5F1       588            mov     a,(_gain + 1)
014F 6480       589            xrl     a,#0x80
0151 9480       590            subb    a,#0x80
0153 5001       591            jnc     L007008?
0155 AAF0       592            mov     r2,_gain
0157 7464       593            mov     a,#0x64
0159 C3         594            clr     c
015A 9A         595            subb    a,r2
015B FA         596            mov     r2,a
015C 8001       597            sjmp    L007009?
015E            598   L007008?:
015E 7A00       599            mov     r2,#0x00
0160            600   L007009?:
0160 8AF0       601            mov     _pwmR,r2
0162 22         602            ret
0163            603   ;------------------------------------------------------------
0163            604   ;Allocation info for local variables in function 'pwmcounter'
0163            605   ;------------------------------------------------------------
0163            606   ;------------------------------------------------------------
0163            607   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:114: void pwmcounter (void) interrupt 1
0163            608   ;        -----------------------------------------
0163            609   ;         function pwmcounter
0163            610   ;        -----------------------------------------
0163            611   _pwmcounter:
0163 C0E0       612            push    acc
0165 C0D0       613            push    psw
0167 75D000     614            mov     psw,#0x00
016A            615   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:116: if(++pwmcount>99) pwmcount=0;
016A 0570       616            inc     _pwmcount
016C E570       617            mov     a,_pwmcount
016E 249C       618            add     a,#0xff - 0x63
0170 5001       619            jnc     L008002?
0172 757000     620            mov     _pwmcount,#0x00
0175            621   L008002?:
0175            622   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:117: MOTOR_LEFT_PIN=(pwmL>pwmcount)?1:0;
0175 C3         623            clr     c
0176 E570       624            mov     a,_pwmcount
0178 9530       625            subb    a,_pwmL
017A 9290       626            mov     _P1_0,c
017C            627   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:118: MOTOR_RIGHT_PIN=(pwmR>pwmcount)?1:0;       
017C C3         628            clr     c
017D E570       629            mov     a,_pwmcount
017F 95F0       630            subb    a,_pwmR
0181 9291       631            mov     _P1_1,c
0183 D0D0       632            pop     psw
0185 D0E0       633            pop     acc
0187 32         634            reti
0188            635   ;        eliminated unneeded push/pop dpl
0188            636   ;        eliminated unneeded push/pop dph
0188            637   ;        eliminated unneeded push/pop b
0188            638   ;------------------------------------------------------------
0188            639   ;Allocation info for local variables in function 'main'
0188            640   ;------------------------------------------------------------
0188            641   ;------------------------------------------------------------
0188            642   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:121: void main (void)
0188            643   ;        -----------------------------------------
0188            644   ;         function main
0188            645   ;        -----------------------------------------
0188            646   _main:
0188            647   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:123: setbaud_timer2(TIMER_2_RELOAD); // Initialize serial port using timer 2 
0188 90FFFE     648            mov     dptr,#0xFFFE
018B 120100     649            lcall   _setbaud_timer2
018E            650   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:124: InitTimer0(); // Initialize timer 0 and its interrupt
018E 120100     651            lcall   _InitTimer0
0191            652   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:125: pwmL=0; //% duty cycle wave at 100Hz
0191 753000     653            mov     _pwmL,#0x00
0194            654   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:126: pwmR=0;    
0194 75F000     655            mov     _pwmR,#0x00
0197            656   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:128: while(1)
0197            657   L009002?:
0197            658   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:130: OnOffControl();
0197 120100     659            lcall   _OnOffControl
019A            660   ;        C:\Users\Blake\Dropbox\Documents\GitHub\EECE-284\square_lp828.c:131: wait(10000);
019A 902710     661            mov     dptr,#0x2710
019D 120100     662            lcall   _wait
01A0 8001       663            sjmp    L009002?
01A2            664            rseg R_CSEG
01A2            665   
0000            666            rseg R_CONST
0000            667   
0000            668            rseg R_XINIT
0000            669   
000E            670            CSEG
000E            671   
000E            672   end
